package hr.algebra;

import hr.algebra.dal.DataRepositoryFactory;
import hr.algebra.dal.IDataRepository;
import hr.algebra.model.Role;
import hr.algebra.model.User;
import hr.algebra.panels.AdministrationPanel;
import hr.algebra.panels.UserPanel;
import hr.algebra.utilities.MessageUtils;
import javax.swing.JPanel;

public class Application extends javax.swing.JFrame {

    private User user;
    private final IDataRepository repository;
    
    public Application(User user) {
        this.user = user;
        this.repository = DataRepositoryFactory.getRepository();
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 881, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 547, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        JPanel panel;
        
        if (user.getRole() == Role.ADMIN) {
            panel = new AdministrationPanel(user, repository);
        } else {
            panel = new UserPanel();
        }
        
        setContentPane(panel);
            
        revalidate();
        repaint();
    }//GEN-LAST:event_formWindowOpened

    private static boolean checkConnection(IDataRepository repository) {
        if (!repository.isConnected()) {
            MessageUtils.showErrorMessage("Connection Error", "A database connection to the server could not be established.");
            
            return false;
        }
        return true;
    }
    
    private static void handleLogin() {
        IDataRepository repository = DataRepositoryFactory.getRepository();
        
        if (!checkConnection(repository)) {
            System.exit(1);
            return;
        }
        
        LoginFrame loginFrame = new LoginFrame(repository);
        loginFrame.setVisible(true);
        
        loginFrame.setCallback(user -> {
            if (user == null) {
                MessageUtils.showErrorMessage("Login error", "You must login to use this application.");
                return;
            }
            
            new Application(user).setVisible(true);
        });
    }
    
    public static void main(String args[]) {
      /*  try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                handleLogin();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
